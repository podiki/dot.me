;; -*-lisp-*-

(in-package :stumpwm)

;;==============================================================================
;; swank setup
;;==============================================================================

(require :swank)
(swank-loader:init)
(swank:create-server :port 4004
                     :style swank:*communication-style*
                     :dont-close t)

;;==============================================================================
;; basic settings
;;==============================================================================

(set-prefix-key (kbd "C-m"))

(setf *message-window-gravity* :center
      *input-window-gravity* :center
      *window-border-style* :thin
      *message-window-padding* 10
      *maxsize-border-width* 5
      *normal-border-width* 5
      *transient-border-width* 2
      stumpwm::*float-window-border* 2
      stumpwm::*float-window-title-height* 5)

(set-normal-gravity :center)
(set-maxsize-gravity :center)
(set-transient-gravity :center)

(setf *mouse-focus-policy* :sloppy)
(run-shell-command "xsetroot -cursor_name left_ptr")

;;==============================================================================
;; modules
;;==============================================================================

(set-module-dir "~/stumpwm")
(load-module "end-session")
(load-module "swm-gaps")
(load-module "ttf-fonts")

;; scratchpad from https://github.com/herbertjones/my-stumpwm-config
(load-module "scratchpad")

;;==============================================================================
;; looks
;;==============================================================================
(set-font (make-instance 'xft:font
                         :family "Hack Nerd Font Mono"
                         :subfamily "Regular"
                         :size 12))

;;==============================================================================
;; key bindings
;;==============================================================================

;; default terminal binding
(define-key *root-map* (kbd "c") "exec termite")
;; pule audio controls
(define-key *top-map* (kbd "XF86AudioRaiseVolume")
  "exec pactl set-sink-volume 0 +2.5%")
(define-key *top-map* (kbd "XF86AudioLowerVolume")
  "exec pactl set-sink-volume 0 -2.5%")
(define-key *top-map* (kbd "XF86AudioMute")
  "exec pactl set-sink-mute 0 toggle")
;; mpc media keys
(define-key *top-map* (kbd "XF86AudioPrev") "exec mpc prev")
(define-key *top-map* (kbd "XF86AudioNext") "exec mpc next")
(define-key *top-map* (kbd "XF86AudioPlay") "exec mpc toggle")

;; rofi
(define-key *top-map* (kbd "s-d") "exec rofi -show combi")

;; scratchpad
(defcommand scratchpad-term () ()
  (scratchpad:toggle-floating-scratchpad "term" "termite"
                                         :initial-gravity :center))
(define-key *top-map* (kbd "s-t") "scratchpad-term")

(defcommand scratchpad-rambox () ()
  (scratchpad:toggle-floating-scratchpad "rambox" "rambox"
                                         :initial-gravity :center))
(define-key *top-map* (kbd "s-m") "scratchpad-rambox")

(defcommand scratchpad-signal () ()
  (scratchpad:toggle-floating-scratchpad "signal" "signal-desktop --use-tray-icon"
                                         :initial-gravity :center))
(define-key *top-map* (kbd "s-n") "scratchpad-signal")

;; toggles
(defvar *toggle-map* (make-sparse-keymap))
(define-key *root-map* (kbd "t") '*toggle-map*)
(define-key *toggle-map* (kbd "g") "toggle-gaps")
(define-key *toggle-map* (kbd "m") "mode-line")
(define-key *toggle-map* (kbd "f") "float-this")
(define-key *toggle-map* (kbd "u") "unfloat-this")
(define-key *toggle-map* (kbd "a") "toggle-always-show")
(define-key *toggle-map* (kbd "t") "toggle-always-on-top")

;; group switching
(define-key *top-map* (kbd "s-Tab") "gnext")
(define-key *top-map* (kbd "s-ISO_Left_Tab") "gprev")
(define-key *top-map* (kbd "s-1") "gselect fire")
(define-key *top-map* (kbd "s-2") "gselect chrome")
(define-key *top-map* (kbd "s-3") "gselect school")
(define-key *top-map* (kbd "s-4") "gselect code")
(define-key *top-map* (kbd "s-5") "gselect term")
(define-key *top-map* (kbd "s-6") "gselect photo")
(define-key *top-map* (kbd "s-7") "gselect movie")
(define-key *top-map* (kbd "s-8") "gselect steam")
(define-key *top-map* (kbd "s-9") "gselect read")
(define-key *top-map* (kbd "s-0") "gselect music")

;; window moving
(define-key *top-map* (kbd "s-Right") "move-window right")
(define-key *top-map* (kbd "s-Left") "move-window left")
(define-key *top-map* (kbd "s-Up") "move-window up")
(define-key *top-map* (kbd "s-Down") "move-window down")

;;==============================================================================
;; those sweet gaps
;;==============================================================================

;; Head gaps run along the 4 borders of the monitor(s)
;; Inner gaps run along all the 4 borders of a window
;; Outer gaps add more padding to the outermost borders of a window (touching
;; the screen border)
(setf swm-gaps:*head-gaps-size*  0
      swm-gaps:*inner-gaps-size* 20
      swm-gaps:*outer-gaps-size* 10)

;; Call command is toggle-gaps
;; Start with gaps enabled
(if (not swm-gaps:*gaps-on*)
    (swm-gaps:toggle-gaps))

;; =============================================================================
;;   startup programs
;; =============================================================================

;; use dex for autostart .desktop entries
(run-shell-command "dex -ae stump")
(run-shell-command "udiskie --tray")
(run-shell-command "xscreensaver -no-splash")
(run-shell-command "blueshift-tray -c ~/blueshift.conf")
(run-shell-command "volumeicon")
;; polybar
(run-shell-command "$HOME/.config/polybar/launch.sh")
;; compositing with compton
(run-shell-command "compton -b")
;; flashfocus
(run-shell-command "flashfocus")

;; xiccd seems to not fully load(?) X atom ICC profile, so do this also
;; but doesn't seem to work (need to wait for xiccd first?), and end up
;; running it again after startup
(run-shell-command "dispwin -L")
