#+TITLE: Emacs Configuration
#+PROPERTY: header-args :tangle yes

* Basics and General Config
** Custom-set-variables
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-safe-themes
     (quote
      ("8db4b03b9ae654d4a57804286eb3e332725c84d7cdab38463cb6b97d5762ad26" "b571f92c9bfaf4a28cb64ae4b4cdbda95241cd62cf07d942be44dc8f46c491f4" "f5eb916f6bd4e743206913e6f28051249de8ccfd070eae47b5bde31ee813d55f" "26614652a4b3515b4bbbb9828d71e206cc249b67c9142c06239ed3418eff95e2" "f0b0710b7e1260ead8f7808b3ee13c3bb38d45564e369cbe15fc6d312f0cd7a0" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "e56f1b1c1daec5dbddc50abd00fcd00f6ce4079f4a7f66052cf16d96412a09a9" "b71d5d49d0b9611c0afce5c6237aacab4f1775b74e513d8ba36ab67dfab35e5a" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "1b8d67b43ff1723960eb5e0cba512a2c7a2ad544ddb2533a90101fd1852b426e" "bb08c73af94ee74453c90422485b29e5643b73b05e8de029a6909af6a3fb3f58" "fc5fcb6f1f1c1bc01305694c59a1a861b008c534cae8d0e48e4d5e81ad718bc6" "9dae95cdbed1505d45322ef8b5aa90ccb6cb59e0ff26fef0b8f411dfc416c552" "1e7e097ec8cb1f8c3a912d7e1e0331caeed49fef6cff220be63bd2a6ba4cc365" "756597b162f1be60a12dbd52bab71d40d6a2845a3e3c2584c6573ee9c332a66e" "cdc7555f0b34ed32eb510be295b6b967526dd8060e5d04ff0dce719af789f8e5" "6a37be365d1d95fad2f4d185e51928c789ef7a4ccf17e7ca13ad63a8bf5b922f" default)))
   '(paradox-github-token t))
#+END_SRC

** Some variables
** Initial size, appearance, etc.
#+BEGIN_SRC emacs-lisp
  ;; initial size
  (setq default-frame-alist '((width . 100)
                              (height . 50)))

  ;; no system bell or toolbar, scrollbar, delete goes to trash
  (setq visible-bell 1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq delete-by-moving-to-trash 1)
  ;; possible display speed up (less responsive typing possible)
  (setq redisplay-dont-pause 1)
  ;; garbage collection every 20MB instead of default 0.76 (from flx)
  (setq gc-cons-threshold 20000000)
  ;; no goddamn tabs
  (setq-default indent-tabs-mode nil)
  ;; all prompts use only y or n
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; overwrite selections
  (delete-selection-mode 1)

  ;; treat the end of sentence as punctuation plus one space (not two)
  (setq sentence-end-double-space nil)

  ;; always blink that cursor (easier to find and I like it)
  (setq blink-cursor-blinks 0)

  ;; proper encoding for ansi-term (mainly for powerline-shell characters)
  (defadvice ansi-term (after advise-ansi-term-coding-system)
      (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
  (ad-activate 'ansi-term)

  ;; fix delete key not deleting forward
  (normal-erase-is-backspace-mode 1)
#+END_SRC
** Visual line mode
Use visual line mode in all text buffers
#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC
And have some indicators in fringe
#+BEGIN_SRC emacs-lisp
;  (setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
#+END_SRC

Also, prevent wide lines by wrapping
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :config
    (setq-default visual-fill-column-width 90)
    (setq visual-fill-column-split-window-sensibly t)
    :hook
    (visual-line-mode . visual-fill-column-mode))
#+end_src
** Lines
#+begin_src emacs-lisp
  ;; Show line-number and column-number in the mode line
  (line-number-mode 1)
  (column-number-mode 1)

  ;; line numbers for prog-mode
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  ;; highlight current line
  (global-hl-line-mode 1)
#+end_src
** Movement customization
*** transient-mark-mode related (commands from [[https://masteringemacs.org/article/fixing-mark-commands-transient-mark-mode][MasteringEmacs]])
#+BEGIN_SRC emacs-lisp
  (defun push-mark-no-activate ()
    "Pushes `point' to `mark-ring' and does not activate the region
  Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
    (interactive)
    (push-mark (point) t nil)
    (message "Pushed mark to ring"))
  (global-set-key (kbd "C-`") 'push-mark-no-activate)
  (defun jump-to-mark ()
    "Jumps to the local mark, respecting the `mark-ring' order.
  This is the same as using \\[set-mark-command] with the prefix argument."
    (interactive)
    (set-mark-command 1))
  (global-set-key (kbd "M-`") 'jump-to-mark)
  (defun exchange-point-and-mark-no-activate ()
    "Identical to \\[exchange-point-and-mark] but will not activate the region."
    (interactive)
    (exchange-point-and-mark)
    (deactivate-mark nil))
  (define-key global-map [remap exchange-point-and-mark] 'exchange-point-and-mark-no-activate)
#+END_SRC
*** smarter move-to-beginning-of-line (from [[http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][emacsredux]])
#+BEGIN_SRC emacs-lisp
  (defun smarter-move-beginning-of-line (arg)
    "Move point back to indentation of beginning of line.

  Move point to the first non-whitespace character on this line.
  If point is already there, move to the beginning of the line.
  Effectively toggle between the first non-whitespace character and
  the beginning of the line.

  If ARG is not nil or 1, move forward ARG - 1 lines first.  If
  point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'smarter-move-beginning-of-line)
#+END_SRC
*** hop back and forth between edit point (via [[http://pragmaticemacs.com/emacs/move-through-edit-points/][pragmaticemacs]]), changes described by "C-u 0 C-c b ,"
#+BEGIN_SRC emacs-lisp
  (use-package goto-chg
    :bind (("C-c b ," . goto-last-change)
           ("C-c b ." . goto-last-change-reverse)))
#+END_SRC
*** faster pop-to-mark (via [[http://endlessparentheses.com/faster-pop-to-mark-command.html?source=rss][endlessparentheses]])
#+BEGIN_SRC emacs-lisp
  ;; When popping the mark, continue popping until the cursor
  ;; actually moves
  (defadvice pop-to-mark-command (around ensure-new-position activate)
    (let ((p (point)))
      (dotimes (i 10)
        (when (= p (point)) ad-do-it))))

  ;; Allow pressing C-u C-SPC C-SPC etc. instead
  (setq set-mark-command-repeat-pop t)
#+END_SRC

** Smooth scroll
Found [[http://zwell.net/content/emacs.html][this attempt]] (works okay so far) on the gnu.emacs.help mailing list discussion about [[https://groups.google.com/forum/#!topic/gnu.emacs.help/l7ymPQItP18][smooth scrolling]] (was also thinking of using this [[http://bug-gnu-emacs.gnu.narkive.com/cXKzPf3R/bug-21-4-19-smooth-vscroll-up-down][sample code]] to try to whip up something as a little project). There is an slightly different and more generic version on the same webpage.
*** TODO Fix: scrolling only happen in active buffer, not where mouse is over
*** TODO Fix this to be better
Also tried adding some other [[https://stackoverflow.com/questions/3631220/fix-to-get-smooth-scrolling-in-emacs][settings]]
#+BEGIN_SRC emacs-lisp :tangle no
  (when (memq window-system '(x))
    (defun smooth-scroll (increment)
      (scroll-up increment) (sit-for 0.04)
      (scroll-up increment) (sit-for 0.01)
      (scroll-up increment) (sit-for 0.01)
      (scroll-up increment) (sit-for 0.04)
      (scroll-up increment) (sit-for 0.05)
      (scroll-up increment))

    (setq redisplay-dont-pause t
          scroll-margin 1
          scroll-step 1
          scroll-conservatively 10000
          scroll-preserve-screen-position 1)

    (global-set-key [(mouse-5)] #'(lambda () (interactive) (smooth-scroll 1)))
    (global-set-key [(mouse-4)] #'(lambda () (interactive) (smooth-scroll -1))))
#+END_SRC

** Server
#+BEGIN_SRC emacs-lisp
  (use-package server
    :ensure nil
    :config
    (unless (server-running-p)
    (server-start)))
#+END_SRC
** Frames only
Favor spawning new frames rather than more windows (i.e. rely on the WM rather than Emacs), with the package [[https://github.com/davidshepherd7/frames-only-mode][frames-only-mode]] (see also [[http://techtrickery.com/tearing-out-the-emacs-window-manager.html][this blog post]])
#+begin_src emacs-lisp
  (use-package frames-only-mode
    :config
    (frames-only-mode 1))
#+end_src
** Paradox
for package listing and browsing
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :defer t)
#+END_SRC

** Themes and fonts
*** Load some themes
#+BEGIN_SRC emacs-lisp
  ;; temporarily revert to older emacs colorspace for powerline fix
  ;; and solarized (although can probably use new solarized-broken-srgb instead)
  ;;(setq ns-use-srgb-colorspace nil)
  ;;(load-theme 'leuven)
  ;;(load-theme 'zenburn)
  ;(load-theme 'sanityinc-tomorrow-eighties 1)

  (use-package color-theme-solarized
    :defer t
    :config
    ;; for light version (default is dark)
    (setq frame-background-mode 'light))

  (use-package molokai-theme
    :defer t
    :config
    (setq frame-background-mode 'dark))

  (use-package monokai-theme
    :defer t
    :config
    (setq frame-background-mode 'dark))

  (use-package spacemacs-theme
    :defer t
    :config
    (setq frame-background-mode 'light))

  (use-package doom-themes
               :defer t
               :config
               ;; Enable flashing mode-line on errors
               (doom-themes-visual-bell-config)
               ;; Enable custom neotree theme (uses all-the-icons)
               (doom-themes-neotree-config)
               ;; Corrects (and improves) org-mode's native fontification
               (doom-themes-org-config)
               (setq frame-background-mode 'dark))

  (setq frame-background-mode 'dark)
  (load-theme 'doom-dracula t)

  ;; solaire-mode for grossly incandescent buffers
  (use-package solaire-mode
               :hook ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
               :config
               (solaire-global-mode +1))
#+END_SRC
*** Theme switching
Disable previous custom-theme before loading a new one (via [[https://emacs.stackexchange.com/questions/3112/how-to-reset-color-theme][this StackExchange answer]] and referencing [[http://stackoverflow.com/a/15595000/729907][this answer]]). Also use powerline-reset so that powerline/spaceline is also reset
#+BEGIN_SRC emacs-lisp
  (defadvice load-theme 
    (before theme-dont-propagate activate)
    (mapc #'disable-theme custom-enabled-themes)
    (when (package-installed-p 'powerline)
      (powerline-reset)))
#+END_SRC

And a function for switching between two (day/night) themes, modified from this [[https://github.com/sellout/emacs-color-theme-solarized/issues/167][GitHub discussion]]
#+BEGIN_SRC emacs-lisp
  (defun re-fontify-buffers ()
    "Reload highlight-sexp-mode to update highlight color (not checking with
     if bound-and-true-p highlight-sexp-mode) and re-fontify all buffers
     (e.g. reset org-mode * color)"
    (save-current-buffer
      (mapcar (lambda (buffer)
                (set-buffer buffer)
                (let ((hsm highlight-sexp-mode))
                  (when hsm
                    ;; explicitly remove the sexp overlay to prevent it
                    ;; sticking around with wrong color
                    (hl-sexp-delete-overlay)
                    (highlight-sexp-mode)
                    (highlight-sexp-mode))
                  (font-lock-fontify-buffer)))
              (buffer-list))))

  (defun toggle-day-night-theme (&optional light-or-dark)
    "Switch between two (day/night) themes, optional argument LIGHT-OR-DARK determines
     which setting to switch to, otherwise just toggles between."
    (interactive)
    ;;; switch to dark/light based on LIGHT-OR-DARK and based on current background
    ;;; otherwise toggle theme only (do nothing if mismatch)
    (cond ((or (and (eq light-or-dark :dark) (eq frame-background-mode 'light))
               (and (not light-or-dark) (eq frame-background-mode 'light)))
           (setq frame-background-mode 'dark)
           (load-theme 'doom-one t)
           (re-fontify-buffers))
          ((or (and (eq light-or-dark :light) (eq frame-background-mode 'dark))
               (and (not light-or-dark) (eq frame-background-mode 'dark)))
           (setq frame-background-mode 'light)
           (load-theme 'doom-one-light t)
           (re-fontify-buffers))
          (t (message "Didn't toggle theme, mismatch in arguments."))))
#+END_SRC
*** Fonts
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(x pgtk))
    (cond ((string= "raven" (system-name))
           (set-face-attribute 'default nil :family "Hack Nerd Font" :weight 'light :height 110)
           (set-fontset-font "fontset-default" nil (font-spec :name "Symbola"))
           (set-face-attribute 'variable-pitch nil :family "Open Sans" :weight 'light :height 110))
          ((string= "azazel" (system-name))
           (set-face-attribute 'default nil :family "Hack Nerd Font" :weight 'light :height 110)
           (set-fontset-font "fontset-default" nil (font-spec :name "Symbola"))
           (set-face-attribute 'variable-pitch nil :family "Noto Sans" :height 120))))
#+END_SRC

Mixed pitches
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :config
    ;; so that links in tables don't mess up alignment
    (add-to-list 'mixed-pitch-fixed-pitch-faces 'org-link)
    :hook
    ;; use in all text modes
    (text-mode . mixed-pitch-mode))
#+end_src
** Modeline
#+BEGIN_SRC emacs-lisp
  ;; powerline modeline
  ;; (display problem with terminal emacs?)
  ;(require 'powerline)
  ;(powerline-default-theme)

  ;; smart-mode-line
  ;(sml/setup)
  ;(sml/apply-theme 'powerline)
  ;; shorten directories/modes
  ;(setq sml/shorten-directory t)
  ;(setq sml/shorten-modes t)
  ;(setq sml/name-width 40)
  ;(setq sml/mode-width 'full)
  ;; directory abbreviations
  ;(add-to-list 'sml/replacer-regexp-list '("^~/Dropbox/" ":DB:") t)
  ;(add-to-list 'sml/replacer-regexp-list '("^~/codemonkey/" ":CM:") t)

  ;; powerline modeline, also required for spaceline
  (use-package powerline
    :ensure t)

  ;; (use-package spaceline-config
  ;;   :ensure spaceline
  ;;   :config
  ;;   (spaceline-spacemacs-theme)
  ;;   (setq powerline-default-separator 'wave))

  ;; (use-package spaceline-all-the-icons 
  ;;   :after spaceline
  ;;   :config (spaceline-all-the-icons-theme)
  ;;   (spaceline-all-the-icons--setup-package-updates)
  ;;   (spaceline-all-the-icons--setup-paradox)
  ;;   (spaceline-all-the-icons--setup-neotree))

  ;; doom-modeline
  (use-package doom-modeline
               :ensure t
               :init (doom-modeline-mode 1)
               :config
               (setq doom-modeline-icon t)
               (setq doom-modeline-major-mode-icon t)
               (setq doom-modeline-major-mode-color-icon t)
               (setq doom-modeline-github nil))
#+END_SRC

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-startup-banner 'logo
          dashboard-set-heading-icons t
          dashboard-set-file-icons t
          show-week-agenda-p t)
    (dashboard-setup-startup-hook))
#+end_src
** IDO and smex
Use ido-mode with ido-ubiquitous to use it everywhere, flx-ido for better matching, vertical display of completions, and smex for command ido. defadvice for opening files as root (via [[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][Emacs Redux]])
#+BEGIN_SRC emacs-lisp
  ;; IDO mode
  (use-package ido
    :disabled
    :config
    (ido-mode 1)
    (setq ido-enable-flex-matching 1)
    (setq ido-use-filename-at-point 'guess)
    ;; show recent files in buffer list
    (setq ido-use-virtual-buffers 1)
    (setq ido-everywhere 1)
    (defadvice ido-find-file (after find-file-sudo activate)
    "Find file as root if necessary."
    (unless (and buffer-file-name
                 (file-writable-p buffer-file-name))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name)))))
  ;; Use ido everywhere
  (use-package ido-completing-read+
    :disabled
    :config
    (ido-ubiquitous-mode 1))

  ;; flx-ido (better matching)
  (use-package flx-ido
    :disabled
    :ensure t
    :config
    (flx-ido-mode 1)
    ;; disable ido faces to see flx highlights.
    (setq ido-use-faces nil))

  ;; vertical ido list
  (use-package ido-vertical-mode
    :disabled
    :ensure t
    :config
    (ido-vertical-mode 1)
    ;; allow arrow keys also
    (setq ido-vertical-define-keys 'C-n-C-p-up-down-left-right)
    (setq ido-use-faces 1))

  ;; smex (ido-like for commands)
  (use-package smex
    :disabled
    :ensure t
    :init
    (smex-initialize) ; Can be omitted. This might cause a (minimal) delay
                      ; when Smex is auto-initialized on its first run.
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands)
           ;; The old M-x
           ("C-c C-c M-x" . execute-extended-command)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; discover
  ;; (use-package discover
  ;;   :ensure nil
  ;;   :config
  ;;   (global-discover-mode 1))

  ;; expand region intelligently
  ;; (global-set-key (kbd "C-=") 'er/expand-region)

  ;; multiple cursors
  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->"         . mc/mark-next-like-this)
           ("C-<"         . mc/mark-previous-like-this)
           ("C-c C-<"     . mc/mark-all-like-this)))
#+END_SRC

** ivy and friends
#+begin_src emacs-lisp
  (use-package ivy
    :disabled
    :config
    ;; ivy completion everywhere
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t ; include recent files and bookmarks
          ivy-count-format "(%d/%d) " ; display index and count
          ;; fuzzy matching except for swiper
          ivy-re-builders-alist '((swiper         . ivy--regex-plus)
                                  (swiper-isearch . ivy--regex-plus)
                                  (t              . ivy--regex-fuzzy)))
    :bind
    (("C-s"     . swiper-isearch)
     ("M-x"     . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-c C-r" . ivy-resume)))
#+end_src

swiper
#+begin_src emacs-lisp
  (use-package swiper
    :disabled
    :after ivy
    :config
    (setq swiper-action-recenter nil
          swiper-goto-start-of-match t))
#+end_src

counsel
#+begin_src emacs-lisp
  (use-package counsel
    :disabled
    :after swiper
    :bind (("C-x C-r" . counsel-recentf)
           ("<f7>"    . counsel-imenu)))
#+end_src

Floating display with ivy-posframe
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :disabled
    :config
    (setq ivy-posframe-display-functions-alist
          '((swiper          . nil)
            ; (complete-symbol . ivy-posframe-display-at-point)
            ; (counsel-M-x     . ivy-posframe-display-at-window-bottom-left)
            (t               . ivy-posframe-display-at-frame-bottom-window-center))
          ivy-posframe-height-alist '((t . 20))
          ivy-posframe-parameters '((internal-border-width . 10))
          ivy-posframe-width 75)
    (ivy-posframe-mode 1))
#+end_src

More info with ivy-rich (with config starting from a [[https://www.reddit.com/r/emacs/comments/ehjcu2/screenshot_polishing_my_emacs_who_said_an_old/fcmbozm/][Reddit post/comment]])
#+begin_src emacs-lisp
  (use-package ivy-rich
    :disabled
    :preface
    (defun ivy-rich-switch-buffer-icon (candidate)
      (with-current-buffer
          (get-buffer candidate)
        (let ((icon (all-the-icons-icon-for-mode major-mode)))
          (if (symbolp icon)
              (all-the-icons-icon-for-mode 'fundamental-mode)
            icon))))
      :init
    (setq ivy-rich-display-transformers-list ; max column width sum = (ivy-poframe-width - 1)
          '(ivy-switch-buffer
            (:columns
             ((ivy-rich-switch-buffer-icon (:width 2))
              (ivy-rich-candidate (:width 35))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-major-mode (:width 13 :face warning)))
             :predicate
             (lambda (cand) (get-buffer cand)))
            counsel-M-x
            (:columns
             ((counsel-M-x-transformer (:width 35))
              (ivy-rich-counsel-function-docstring (:width 34 :face font-lock-doc-face))))
            counsel-describe-function
            (:columns
             ((counsel-describe-function-transformer (:width 35))
              (ivy-rich-counsel-function-docstring (:width 34 :face font-lock-doc-face))))
            counsel-describe-variable
            (:columns
             ((counsel-describe-variable-transformer (:width 35))
              (ivy-rich-counsel-variable-docstring (:width 34 :face font-lock-doc-face))))
            package-install
            (:columns
             ((ivy-rich-candidate (:width 25))
              (ivy-rich-package-version (:width 12 :face font-lock-comment-face))
              (ivy-rich-package-archive-summary (:width 7 :face font-lock-builtin-face))
              (ivy-rich-package-install-summary (:width 23 :face font-lock-doc-face))))
            counsel-recentf
            (:columns
             ((ivy-rich-candidate (:width 35)) ; return the candidate itself
              (ivy-rich-file-last-modified-time (:face font-lock-comment-face)))) ; return the last modified time of the file
            ))
    :config
    (ivy-rich-mode +1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src

Clocking helper
#+begin_src emacs-lisp
  (use-package counsel-org-clock
    :config
    (setq counsel-org-clock-default-action 'clock-dwim
          counsel-org-clock-goto-fallback-function #'org-clock-in-last
          counsel-org-clock-history-limit 10)
    :bind
    (("M-g M-j" . counsel-org-clock-goto)
     ("<f8>"    . counsel-org-clock-context)))
#+end_src

Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :disabled)
  (use-package ivy-hydra
    :disabled)
#+end_src
** vertico
#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package vertico-posframe
    :init
    (vertico-posframe-mode 1))
#+end_src
** consult
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ("<help> a" . consult-apropos)            ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings (search-map)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("C-s"   . consult-line)
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key (kbd "M-."))
    ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme
     :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-recent-file
     consult--source-project-recent-file
     :preview-key (kbd "M-."))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; (kbd "C-+")

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;; There are multiple reasonable alternatives to chose from.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 3. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 4. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  )
#+end_src
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (setq which-key-idle-delay 0.5)
    (which-key-mode))
#+END_SRC
** Line numbers with linum
#+BEGIN_SRC emacs-lisp
  (use-package linum
    :disabled t
    :config
  
    ;; 
    ;; Line number in left margin using linum
    ;;

    ;; (global-linum-mode 1)
    ;; linum mode for text and prog-mode derived buffers
    ;; (can't have it for pdf-tools)
    ;; (add-hook 'text-mode-hook 'linum-mode)
    (add-hook 'prog-mode-hook 'linum-mode)
    ;; (set-face-attribute 'linum nil :height 100)

    ;; Fix from EmacsWiki to have space before the line contents with right-
    ;; aligned numbers padded only to the max number of digits in the buffer
    (unless window-system
      (add-hook 'linum-before-numbering-hook
                (lambda ()
                  (setq-local linum-format-fmt
                              (let ((w (length (number-to-string
                                                (count-lines (point-min) (point-max))))))
                                (concat "%" (number-to-string w) "d"))))))

    (defun linum-format-func (line)
      (concat
       (propertize (format linum-format-fmt line) 'face 'linum)
       (propertize " " 'face 'mode-line)))

    (unless window-system
      (setq linum-format 'linum-format-func))

    ;; Select lines by click-dragging on the margin (where the line numbers are)
    ;; from EmacsWiki
    ;; DOESN'T WORK, but at least clicking on a number goes to that line
    ;; (e.g. can select by clicking a second time while pressing shift)
    ;; ACTUALLY: works in windowed mode it seems, but not so in terminal
    (defvar *linum-mdown-line* nil)

    (defun line-at-click ()
      (save-excursion
        (let ((click-y (cdr (cdr (mouse-position))))
              (line-move-visual-store line-move-visual))
          (setq line-move-visual t)
          (goto-char (window-start))
          (next-line (1- click-y))
          (setq line-move-visual line-move-visual-store)
          ;; If you are not using tabbar substitute the next line with
          ;; (1+ (line-number-at-pos)))))
          (line-number-at-pos))))

    (defun md-select-linum ()
      (interactive)
      (goto-line (line-at-click))
      (set-mark (point))
      (setq *linum-mdown-line* (line-number-at-pos)))

    (defun mu-select-linum ()
      (interactive)
      (when *linum-mdown-line*
        (let (mu-line)
          (setq mu-line (line-at-click))
          (if (> mu-line *linum-mdown-line*)
              (progn
                (goto-line *linum-mdown-line*)
                (set-mark (point))
                (goto-line mu-line)
                (end-of-line))
            (progn
              (goto-line *linum-mdown-line*)
              (set-mark (line-end-position))
              (goto-line mu-line)
              (beginning-of-line)))
          (setq *linum-mdown* nil))))

    (global-set-key (kbd "<left-margin> <down-mouse-1>") 'md-select-linum)
    (global-set-key (kbd "<left-margin> <mouse-1>") 'mu-select-linum)
    (global-set-key (kbd "<left-margin> <drag-mouse-1>") 'mu-select-linum)

    ;; highlight current line number
    (use-package hlinum
      :disabled t
      :config
      (hlinum-activate)))
#+END_SRC

** Color-identifiers and highlight symbols
#+BEGIN_SRC emacs-lisp
  ;; color-identifiers-mode
  (use-package color-identifiers-mode
    :hook
    (after-init . global-color-identifiers-mode))

  ;; highlight symbols in buffer
  (use-package highlight-symbol
    :bind (("C-<F3>" . highlight-symbol-at-point)
           ("<F3>"   . highlight-symbol-next)
           ("S-<F3>" . highlight-symbol-prev)
           ("M-<F3>" . highlight-symbol-query-replace))
    :config
    (setq highlight-symbol-idle-delay 0)
    :hook
    (prog-mode . highlight-symbol-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Enable mouse support in terminal
  (unless window-system
    (require 'mouse)
    (xterm-mouse-mode t)
    (global-set-key [mouse-4] #'(lambda ()
                                  (interactive)
                                  (scroll-down 1)))
    (global-set-key [mouse-5] #'(lambda ()
                                  (interactive)
                                  (scroll-up 1)))
    (defun track-mouse (e))
    (setq mouse-sel-mode t))

  ;; flyspell
  ;; checks all buffers on opening, too slow
  ;;(add-hook 'flyspell-mode-hook 'flyspell-buffer)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (eval-after-load "flyspell"
      '(progn
         (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
         (define-key flyspell-mouse-map [mouse-3] #'undefined)))

  ;; dictionary look up
  (use-package define-word
    :bind (("C-c d" . define-word-at-point)
           ("C-c D" . define-word)))

  ;; languagetool grammar checker
  (use-package langtool
    :config
    (setq langtool-default-language "en-US"
      langtool-mother-tongue "en")
    (defun langtool-autoshow-detail-popup (overlays)
      (when (require 'popup nil t)
        ;; Do not interrupt current popup
        (unless (or popup-instances
                    ;; suppress popup after type `C-g` .
                    (memq last-command '(keyboard-quit)))
          (let ((msg (langtool-details-error-message overlays)))
            (popup-tip msg)))))
    (setq langtool-autoshow-message-function
      'langtool-autoshow-detail-popup))

  ;; writegood mode
  (global-set-key "\C-cg" 'writegood-mode)
  (global-set-key "\C-c\C-gg" 'writegood-grade-level)
  (global-set-key "\C-c\C-ge" 'writegood-reading-ease)
#+END_SRC

** File navigation
*** Neotree for a file tree side panel
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :bind ("<f9>" . neotree-toggle)
    :config
    (setq neo-theme (if window-system 'icons 'arrow))
    (setq neo-smart-open t))
#+END_SRC
*** Other
#+BEGIN_SRC emacs-lisp
  ;; show path info for buffers with same name
  (require 'uniquify)

  ;; save position on buffer kill
  (require 'saveplace)
  (setq-default save-place 1)
  (setq save-place-file "~/.emacs.d/saved-places")

  ;; use ibuffer (like dired) for buffer list
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; global revert mode (check for file changes)
  (global-auto-revert-mode 1)

  ;;
  ;; recent files list with ido completion (via masteringemacs)
  ;;
  (require 'recentf)

  ;; get rid of `find-file-read-only' and replace it with something
  ;; more useful.
  ;; (global-set-key (kbd "C-x C-r") 'ido-recentf-open) ; now counsel

  ;; don't keep opening connection with TRAMP
  (add-to-list 'recentf-keep 'file-remote-p)
  ;; enable recent files mode.
  (recentf-mode 1)

  ; 50 files ought to be enough.
  (setq recentf-max-saved-items 50)

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
#+END_SRC
*** Dired
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :hook (dired-mode . dired-hide-details-mode)
    :config
    ;; colorful columns
    (use-package diredfl
      :config
      (diredfl-global-mode 1))
    (use-package dired-git-info
      :bind (:map dired-mode-map
                  (")" . dired-git-info-mode))))
#+end_src
* Org-mode
** Basic setup
- Use org-plus-contrib for extras in org-mode. Note that other packages that depend on org will install plain org (though this shouldn't cause any problems, it is annoying when installing something new). Fix this by [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-12/msg00287.html][creating a dummy package]], as there is no way to tell the package manager that org is accounted for. Also add a file org-autoloads.el to prevent startup errors (though of no real consequence I think).
- org-contrib has been separated out; no longer need above
- Some todo/agenda customization from the [[http://pragmaticemacs.com/emacs/org-mode-basics-vii-a-todo-list-with-schedules-and-deadlines/][Pragmatic Emacs blog]]
#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :config
    (use-package org-contrib)
    (setq org-directory "~/Files/Notes")
      ;; use indented view by default
    (setq org-startup-indented t)
    ;; syntax highlight code blocks
    (setq org-src-fontify-natively t)
    ;; use UTF-8 characters for e.g. \alpha and subscripts
    (setq org-pretty-entities t)
    ;; replace the folded section "..."s
    (setq org-ellipsis "…")
    ;; pre-9.2 templates from <
    (require 'org-tempo)
    ;; reset checklists for recurring tasks
    (require 'org-checklist)
    ;; allow ignoring headlines but not their contents
    ;; see https://emacs.stackexchange.com/a/17677
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines))
    ;; export backends
    (setq org-export-backends (append org-export-backends '(md)))
    ;; html5 for html export
    (setq org-html-html5-fancy t
          org-html-doctype "html5")
    ;; org-babel languages
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((shell . t)
        (python . t)
        (gnuplot . t)
        (ledger . t)
        (lisp . t)
        (latex . t)
        (maxima . t)))
    ;; To partially italic/bold/underline/strikethrough
    ;; from http://stackoverflow.com/a/24540651
    ;; (found this too distracting with URLs messing up formatting)
    ;; (setcar org-emphasis-regexp-components " \t('\"{[:alpha:]")
    ;; (setcar (nthcdr 1 org-emphasis-regexp-components) "[:alpha:]- \t.,:!?;'\")}\\")
    ;; (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
    ;; LaTeX customization
    (require 'ox-latex)
    (setq org-latex-pdf-process (list "latexmk -f -lualatex -pdf %f"))
    (add-to-list 'org-latex-classes
                 '("latex-general"
                   "\\documentclass[11pt, letterpaper]{article}
                    \\usepackage[hmargin = 1in, vmargin = 1in]{geometry}
                    \\usepackage{fontspec}
                    \\usepackage{unicode-math}
                    \\setmainfont{TeX Gyre Pagella}
                    \\setmathfont{TeX Gyre Pagella Math}
                    \\usepackage[pdftex, colorlinks=true, plainpages=false, pdfpagelabels]{hyperref}
                    \\title{}
                    [NO-DEFAULT-PACKAGES]
                    [PACKAGES]"
                   ("\\section{%s}"       . "\\section*{%s}")
                   ("\\subsection{%s}"    . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}"     . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}"  . "\\subparagraph*{%s}")))
    ;; time duration format instead of days
    (setq org-duration-format (quote h:mm))
    ;; todo and agenda customization
    (setq org-todo-keywords '((sequence "TODO(t)" "WAITING" "|" "ABANDONDED(b)" "DONE(d)")))
    ;; enforce dependencies
    (setq org-enforce-todo-dependencies t
          org-enforce-todo-checkbox-dependencies t)
    ;; warn of upcoming deadlines in next week
    (setq org-deadline-warning-days 7)
    ;; show tasks for next fornight
    (setq org-agenda-span 'fortnight)
    ;; don't show tasks as scheduled if they are already shown as a deadline
    (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
    ;; don't give awarning color to tasks with impending deadlines
    ;; if they are scheduled to be done
    (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
    ;; don't show tasks that are scheduled or have deadlines in the
    ;; normal todo list
    (setq org-agenda-todo-ignore-deadlines (quote all))
    (setq org-agenda-todo-ignore-scheduled (quote all))
    ;; sort tasks in order of tiem, then when they are due, then by priority
    (setq org-agenda-sorting-strategy
      (quote
       ((agenda time-up deadline-up priority-down category-keep)
        (todo priority-down category-keep)
        (tags priority-down category-keep)
        (search category-keep))))
    ;; set priority range from (default) A to C
    (setq org-highest-priority ?A)
    (setq org-lowest-priority ?C)
    (setq org-default-priority ?A)
    ;; todo file(s)
    (setq org-agenda-files (concat org-directory "/todoes"))
    ;; todo capture template with default priority and scheduled for today
    (setq org-capture-templates
          '(("t" "todo" entry (file+headline "todoes.org" "Tasks")
             "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")
            ("e" "email todo" entry (file+olp "2020-spring-notes.org"
                                     "Pre-semester")
             "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))
    ;; show refile tree in depth
    (setq org-refile-targets '((nil :maxlevel . 3))
          org-refile-use-outline-path t
          ;; to see tree path in ivy/posframe
          org-outline-path-complete-in-steps nil)
    :bind
    (("C-c a" . org-agenda)
     ("<f6>"  . org-agenda-list)
     ("C-c c" . org-capture)
     ("C-c l" . org-store-link)
     ("C-c b" . org-switchb))
    :hook
    (org-mode . visual-line-mode))

  ;; fancy utf-8 bullets
  (use-package org-superstar
    :hook
    (org-mode . (lambda () (org-superstar-mode 1)))
    :config
    (org-superstar-configure-like-org-bullets)
    (setf org-superstar-special-todo-items t))

  (use-package org-bullets
    :ensure t ; no longer included in org-plus-contrib
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))

  ;; htmlize for nicer html output
  (use-package htmlize)
#+END_SRC
** For presentations with reveal.js
Moved to newer fork org-re-reveal (but org-reveal active again?)
#+BEGIN_SRC emacs-lisp
  (use-package org-re-reveal)

  ;; (use-package ox-reveal
  ;;   :config
  ;;   ;; use CDN copy by default
  ;;   (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))
#+END_SRC
** HTML embed images
This code redefines how images are handled in HTML export to embed them in the code. Run this code before HTML export if wanting to make single file without needing external images. From [[https://www.reddit.com/r/orgmode/comments/7dyywu/creating_a_selfcontained_html/dq6dhv3][this Reddit comment]].
#+BEGIN_SRC emacs-lisp :tangle no
  (defun replace-in-string (what with in)
    (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

  (defun org-html--format-image (source attributes info)
    (progn
      (setq source (replace-in-string "%20" " " source))
      (format "<img src=\"data:image/%s;base64,%s\"%s />"
              (or (file-name-extension source) "")
              (base64-encode-string
               (with-temp-buffer
                 (insert-file-contents-literally source)
                (buffer-string)))
              (file-name-nondirectory source))))
#+END_SRC
** Blog posting with org2blog
For [[https://boilingsteam.com][Boiling Steam posts]]
#+BEGIN_SRC emacs-lisp
  (use-package org2blog
    :defer t
    :config
    (require 'auth-source)
    (setq org2blog/wp-blog-alist
          `(("boilingsteam"
             :url "https://boilingsteam.com/xmlrpc.php"
             :username ,(cl-getf (car (auth-source-search :host "boilingsteam"))
                              :user)))
          org2blog/wp-image-upload t
          org2blog/wp-image-thumbnails nil) ; gave me trouble with wrong img src
    ;; define a filter function to add a class for WP figures and remove "Figure #: "
    ;; https://emacs.stackexchange.com/questions/27694/constructing-an-advice-around-org-html-wrap-image
    (defun org-wp-export-figure-class (s backend info)
      (when (org-export-derived-backend-p backend 'wp)
        (let ((snew (replace-regexp-in-string "<figure" "<figure class=\"wp-block-image size-large\"" s)))
          (replace-regexp-in-string "<span class=\"figure-number\">Figure [0-9]+: </span>" "" snew))))
    (add-to-list 'org-export-filter-final-output-functions 'org-wp-export-figure-class))
#+END_SRC
** Calendar
Sync with Google Calendar using org-gcal
#+begin_src emacs-lisp
  (use-package org-gcal
    :defer t
    :config
    (let* ((auth (car (auth-source-search :host "gcal")))
           (id (plist-get auth :user))
           (secret (funcall (plist-get auth :secret))))
      (setq org-gcal-local-timezone "America/New_York"
            org-gcal-client-id id
            org-gcal-client-secret secret
            org-gcal-file-alist
            '(("sweet.cheesus@gmail.com" .  "~/Files/Notes/gcal-main.org")
              ("u8vo3jc5fiva545r6icssgap369nti8b@import.calendar.google.com" . "~/Files/Notes/gcal-cw.org"))
            org-gcal-notify-p nil)))
#+end_src

Pretty view with calfw (currently disabled as haven't used it)
#+begin_src emacs-lisp
  (use-package calfw
    :disabled t
    :defer t
    :config
    (require 'calfw-org))
#+end_src

And org-super-agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda)
#+end_src
** Research
*** pdf-tools
pdf-tools for viewing pdfs in emacs
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :config
    (pdf-tools-install)
    ;; open pdfs scaled to fit page
    (setq-default pdf-view-display-size 'fit-page)
    ;; use isearch instead of swiper
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
#+end_src
*** org-ref
org-ref for reference management
#+begin_src emacs-lisp
  (use-package org-ref
    :defer t
    :config
    (let ((org-ref-dir (concat org-directory "/science-style-lr/")))
      (setq reftex-default-bibliography (list (concat org-ref-dir "references.bib"))
            org-ref-bibliography-notes (concat org-ref-dir "notes.org")
            org-ref-default-bibliography (list (concat org-ref-dir "references.bib"))
            org-ref-pdf-directory (concat org-ref-dir "papers/")))

    ;; add org-noter field to use in org-ref
    ;; via https://github.com/jkitchin/org-ref/issues/455
    ;; set the bibtex field containing the pdf path
    (setq bibtex-completion-pdf-field "file")

    (defun my/get-pdf-filename (key)
      (let ((results (bibtex-completion-find-pdf key)))
        (if (equal 0 (length results))
            (org-ref-get-pdf-filename key)
          (car results))))
  
    (setq org-ref-create-notes-hook
          '((lambda ()
                      (org-entry-put
                       nil
                       "NOTER_DOCUMENT"
                       (my/get-pdf-filename (org-entry-get
                                             (point) "Custom_ID")))
                      (org-narrow-to-subtree)
                      (insert
                       (format "cite:%s"
                               (org-entry-get
                                (point)
                                "Custom_ID")))))))
#+end_src
*** org-noter
org-noter to take notes associated with pdfs
#+begin_src emacs-lisp
  (use-package org-noter
    :config (setq org-noter-default-notes-file-names '("notes.org")
                  org-noter-notes-search-path (list (concat org-directory "/science-style-lr/"))))
#+end_src
** Clocktable link fix
Links don't work well in a clocktable, at least when exported to html. The issue is how the links are created, which just use the headline name, but not uniquely. The solution is to have ~CUSTOM_ID~ set for each headline, make sure these are generated as needed, and use them to create a unique link.

This is a function to get and create ~CUSTOM_ID~ for an entry, from [[https://writequit.org/articles/emacs-org-mode-generate-ids.html][this blog post]], which also goes into some detail about why this is needed more generally.

#+begin_src emacs-lisp
  (defun my/org-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
     If POM is nil, refer to the entry at point. If the entry does
     not have an CUSTOM_ID, the function returns nil. However, when
     CREATE is non nil, create a CUSTOM_ID if none is present
     already. PREFIX will be passed through to `org-id-new'. In any
     case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom)
    (let ((id (org-entry-get nil "CUSTOM_ID")))
      (cond
        ((and id (stringp id) (string-match "\\S-" id))
         id)
        (create
         (setq id (org-id-new (concat prefix "h")))
         (org-entry-put pom "CUSTOM_ID" id)
         (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
         id))))
#+end_src

Now we add advice to the clocktable generating code to give ids to all entries that the clocktable will use. While we can use the ~:match~ parameter, ~:scope~ doesn't match exactly from it's use in a clocktable to ~org-map-entries~ so it becomes ~tree~ in some cases (note: some cases aren't handled, like ~treeN~). The advice function has to run before the clock code or else the adding of the ids messes up some formatting (probably because the point no longer matches where it started).

#+begin_src emacs-lisp
  (defun my/org-custom-ids-generate (args)
    (let* ((params (org-combine-plists org-clocktable-defaults args))
           (match (plist-get params :match))
           (scope (plist-get params :scope)))
      (org-map-entries (lambda () (my/org-custom-id-get (point) 'create))
                       match
                       (if (or (eq scope 'tree)
                               (eq scope 'subtree))
                           'tree
                         scope))))

  (eval-after-load "org-clock"
    '(advice-add 'org-dblock-write:clocktable
    :before
    #'my/org-custom-ids-generate))
#+end_src

Finally, we do a quick and dirty hack to patch (using advice-patch) the clocktable formatting code to use these ids to generate better links.

#+begin_src emacs-lisp
  (use-package advice-patch)

  (eval-after-load "org-clock"
    '(advice-patch 'org-clock-get-table-data
      '(progn (ignore search) (format "#%s" (my/org-custom-id-get nil t)))
      '(format "file:%s::%s" (buffer-file-name) search)))
#+end_src
** Extras
For easy grabbing of links
#+begin_src emacs-lisp
  (use-package org-cliplink
    :bind
    ("C-x p i" . org-cliplink))
#+end_src

Mixed variable and fixed pitch fonts now handled by ~mixed-pitch~ package instead
#+begin_src emacs-lisp
  ;; (use-package org-variable-pitch
  ;;   :hook
  ;;   (org-mode . org-variable-pitch-minor-mode)
  ;;   :config
  ;;   ;; fonts
  ;;   (setq org-variable-pitch-fixed-font (face-attribute 'fixed-pitch :family))
  ;;   (set-face-attribute 'org-variable-pitch-face nil
  ;;                       :weight (face-attribute 'fixed-pitch :weight)
  ;;                       :height (face-attribute 'fixed-pitch :height))
  ;;   ;; so that links in tables don't mess up alignment
  ;;   (add-to-list 'org-variable-pitch-fixed-faces 'org-link))
#+end_src

Auto tangling of config files
#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :defer t
    :hook (org-mode . org-auto-tangle-mode))
#+end_src
* Email
** mu4e
*** basics
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (use-package mu4e
      :ensure nil
      :bind ([f5] . mu4e)
      :hook (mu4e-compose-pre . my-set-from-address)
      :config
      ;; use mu4e for e-mail in emacs
      (setq mail-user-agent 'mu4e-user-agent)
      ;; global mu4e config
      (setq ;; mbsync (isync) for IMAP syncing
            mu4e-get-mail-command "mbsync -a"
            ;; sync every 5 minutes (though get new messages via goimapnotify)
            mu4e-update-interval 300
            ;; rename files when moving (for mbsync)
            mu4e-change-filenames-when-moving t
            ;; Gmail handles sent messages
            ;; (actually, using 'delete seems to not work, sent message
            ;; doesn't appear anywhere)
            mu4e-sent-messages-behavior 'sent
            ;; (lambda ()
            ;;   (if (string= (message-sendmail-envelope-from) "kehayias@sas.upenn.edu")
            ;;       'delete 'sent))
            ;; use mu4e for e-mail in emacs
            mail-user-agent 'mu4e-user-agent
            ;; format=flowed for plain text wrapping
            ;; has issues in e.g. gmail, so don't use for now
            ;; Another possibility: https://vxlabs.com/2019/08/25/format-flowed-with-long-lines/
            ;; but then get overly long lines in wide windows, for example
            ;; mu4e-compose-format-flowed t

            mu4e-headers-fields
            '((:human-date . 12)
              (:flags      . 6)
              (:from       . 25)
              (:subject    . nil ))
            ;; use 'fancy' non-ascii characters in various places in mu4e
            mu4e-use-fancy-chars t
            ;; attempt to show images when viewing messages
            mu4e-view-show-images t
            ;; show addresses
            mu4e-view-show-addresses t
            ;; prefer html
            mu4e-view-prefer-html t
            ;; don't show related messages
            mu4e-headers-include-related nil
            ;; don't show multiple copies of same message
            mu4e-headers-skip-duplicates t)
      ;; contexts
      (setq mu4e-contexts
            `(,(make-mu4e-context
                :name "UPenn"
                :enter-func (lambda () (mu4e-message "Entering UPenn context"))
                :leave-func (lambda () (mu4e-message "Leaving UPenn context"))
                ;; we match based on the maildir of the message
                ;; this matches maildir /gmail and its sub-directories,
                ;; as well as when From/To matches the main email
                :match-func (lambda (msg)
                              (when msg
                                (or (string-match-p "^/gmail" (mu4e-message-field msg :maildir))
                                    (mu4e-message-contact-field-matches
                                     msg
                                     :to "kehayias@sas.upenn.edu")
                                    (mu4e-message-contact-field-matches
                                     msg
                                     :from "kehayias@sas.upenn.edu"))))
                :vars '((user-mail-address . "kehayias@sas.upenn.edu")
                        (user-full-name    . "John Kehayias" )
                        (mu4e-refile-folder . "/gmail/all")
                        (mu4e-sent-folder   . "/gmail/sent")
                        (mu4e-trash-folder  . "/gmail/trash")
                        (mu4e-drafts-folder . "/gmail/drafts")
                        ;; setup some handy shortcuts
                        ;; you can quickly switch to your Inbox -- press ``ji''
                        ;; then, when you want archive some messages, move them to
                        ;; the 'All Mail' folder by pressing ``ma''.
                        (mu4e-maildir-shortcuts .
                         (("/gmail/Inbox"  . ?i)
                          ("/gmail/drafts" . ?d)
                          ("/gmail/sent"   . ?s)
                          ("/gmail/trash"  . ?t)
                          ("/gmail/all"    . ?a)))
                        (smtpmail-smtp-server  . "smtp.office365.com")
                        (smtpmail-local-domain . "office365.com")
                        (smtpmail-smtp-service . 587)
                        (smtpmail-stream-type  . nil)
                        ;; so we don't get i-did-not-set--mail-host-address--so-tickle-me
                        (mail-host-address . "sas.upenn.edu")))
               ;; This should be sort of a "sub" context, being switched within the above one,
               ;; so only put the settings needed to change for the different smtp settings
               ,(make-mu4e-context
                :name "Gmail"
                :enter-func (lambda () (mu4e-message "Entering Gmail context"))
                :leave-func (lambda () (mu4e-message "Leaving Gmail context"))
                ;; match when From/To matches the main email, though I think only called
                ;; manually on the mu4e-compose-pre-hook via my-set-from-address
                :match-func (lambda (msg)
                              (when msg
                                (or (mu4e-message-contact-field-matches
                                     msg
                                     :to "john.kehayias@gmail.com")
                                    (mu4e-message-contact-field-matches
                                     msg
                                     :from "john.kehayias@gmail.com"))))
                :vars '((user-mail-address     . "john.kehayias@gmail.com")
                        (smtpmail-smtp-server  . "smtp.gmail.com")
                        (smtpmail-local-domain . "gmail.com")
                        (smtpmail-smtp-service . 587)
                        (smtpmail-stream-type  . starttls)
                        (mail-host-address     . "gmail.com")))
              ,(make-mu4e-context
                :name "Proton Mail"
                :enter-func (lambda () (mu4e-message "Entering Proton Mail context"))
                :leave-func (lambda () (mu4e-message "Leaving Proton Mail context"))
                :match-func (lambda (msg)
                              (when msg
                                (string-match-p "^/protonmail" (mu4e-message-field msg :maildir))))
                :vars `((user-mail-address  . "john.kehayias@protonmail.com")
                        (user-full-name     . "John Kehayias" )
                        (mu4e-refile-folder . "/protonmail/Archive")
                        (mu4e-sent-folder   . "/protonmail/Sent")
                        (mu4e-trash-folder  . "/protonmail/Trash")
                        (mu4e-drafts-folder . "/protonmail/Drafts")
                        (mu4e-maildir-shortcuts .
                         (("/protonmail/Inbox"    . ?i)
                          ("/protonmail/Drafts"   . ?d)
                          ("/protonmail/Sent"     . ?s)
                          ("/protonmail/Trash"    . ?t)
                          ("/protonmail/Archive" . ?a)))
                        (smtpmail-smtp-server  . ,(system-name))
                        (smtpmail-local-domain . "protonmail.com")
                        (smtpmail-smtp-service . 1025)
                        (smtpmail-stream-type  . starttls)
                        (mail-host-address     . "protonmail.com")))))
      ;; from mu4e docs
      ;; with loop from https://old.reddit.com/r/emacs/comments/tvfpli/email_setting_up_an_automated_from_while_replying/ijqa637/
      ;; modified to use to/cc/bcc
      (defun my-set-from-address ()
        "Set the From address based on the To/CC/BCC address of the original."
        (let ((msg mu4e-compose-parent-message)
              field)
          (when msg
            (if (or (setq field (mu4e-message-contact-field-matches-me msg :to))
                    (setq field (mu4e-message-contact-field-matches-me msg :cc))
                    (setq field (mu4e-message-contact-field-matches-me msg :bcc)))
                (setq user-mail-address 
                      (cl-loop for to-data in (list field)
                            for to-email = (pcase to-data
                                             (`(_ . email) email)
                                             (x (mu4e-contact-email x)))
                            when (mu4e-user-mail-address-p to-email)
                            return to-email)))
            (message "%s" (mu4e-message-field msg :cc))
            ;; Switch to the "sub" context for sending with gmail.com address
            (if (string= user-mail-address "john.kehayias@gmail.com")
                (mu4e-context-switch nil "Gmail")))))
      ;; To get Gmail-like behavior when using the delete action,
      ;; i.e. deleting from inbox removes duplicate in All Mail and goes
      ;; in trash folder
      ;; Note: Gmail set with Auto-Expunge off and "Move the message to the Trash"
      ;; as what to do with messages deleted and expunged from all IMAP folders
      ;; Thanks to https://github.com/djcb/mu/issues/1136
      (setf (alist-get 'trash mu4e-marks)
            (list :char '("d" . "▼")
                  :prompt "dtrash"
                  :dyn-target (lambda (target msg)
                                (mu4e-get-trash-folder msg))
                  :action (lambda (docid msg target)
                            ;; Here's the main difference to the regular trash mark,
                            ;; no +T before -N so the message is not marked as
                            ;; IMAP-deleted:
                            (mu4e--server-move docid
                                            (mu4e--mark-check-target target)
                                            "+S-u-N"))))

      ;; rename draft autosaves so they don't get synced by mbsync
      ;; from https://emacs.stackexchange.com/a/24430
      (defun draft-auto-save-buffer-name-handler (operation &rest args)
        "for `make-auto-save-file-name' set '.' in front of the file name;
         do nothing for other operations"
        (if
            (and buffer-file-name (eq operation 'make-auto-save-file-name))
            (concat (file-name-directory buffer-file-name)
                    "."
                    (file-name-nondirectory buffer-file-name))
          (let ((inhibit-file-name-handlers
                 (cons 'draft-auto-save-buffer-name-handler
                       (and (eq inhibit-file-name-operation operation)
                            inhibit-file-name-handlers)))
                (inhibit-file-name-operation operation))
            (apply operation args))))

      (add-to-list 'file-name-handler-alist
                   '("drafts/cur/" . draft-auto-save-buffer-name-handler))

      ;; viewing options
      ;; view in browser action
      (add-to-list 'mu4e-view-actions
                   '("ViewInBrowser" . mu4e-action-view-in-browser) t)
      ;; brighter for dark themes
      (setq shr-color-visible-luminance-min 60
            shr-color-visible-distance-min 5)
      ;; don't pollute recentf with mail
      (setq recentf-exclude '("^/tmp/" "^/home/john/\\.mail/"))
      :hook
      (mu4e-view-mode . visual-line-mode)
      ;; emulate some eww key-bindings for html view
      (mu4e-view-mode . (lambda()
                          (local-set-key (kbd "<tab>") 'shr-next-link)
                          (local-set-key (kbd "<backtab>") 'shr-previous-link))))
#+end_src
*** org-mu4e
#+begin_src emacs-lisp
  (require 'org-mu4e)
  ;; link to email not query
  (setq org-mu4e-link-query-in-headers-mode nil)
#+end_src
*** org-msg
Compose nice HTML messages using the power of org-mode
#+begin_src emacs-lisp
  (use-package org-msg
    :after mu4e
    :config
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t")
    (setq org-msg-startup "hidestars indent inlineimages")
    (setq org-msg-greeting-fmt "\nDear%s,\n\n")
    ;; to have greeting be a mailto link
    (setq org-msg-greeting-fmt-mailto nil)
    (setq org-msg-default-alternatives '((new           . (text))
                                         (reply-to-html . (html))
                                         (reply-to-text . (text))))
    ;; (setq org-msg-posting-style nil) ; don't top post
    (setq org-msg-convert-citation t)
    (org-msg-mode))
#+end_src
*** Notifications
Use mu4e-alert
#+begin_src emacs-lisp
  (use-package mu4e-alert
    :config
    (mu4e-alert-set-default-style 'libnotify)
    ;; don't notify for trashed messages or in all
    (setq mu4e-alert-interesting-mail-query
          (concat "flag:unread"
                  " AND NOT maildir:/gmail/all"
                  " AND NOT flag:trashed"
                  " AND NOT maildir:/gmail/trash"))
    :hook
    ((after-init . mu4e-alert-enable-notifications)
     (after-init . mu4e-alert-enable-mode-line-display)))
#+end_src
*** Other customizations
Pretty icons
#+begin_src emacs-lisp
  (use-package mu4e-marker-icons
    :after mu4e
    :init (mu4e-marker-icons-mode 1))
#+end_src

For Gnus, currently just in using debbugs to reply to all (not just bug number address)
#+begin_src emacs-lisp
  (use-package gnus
    :bind (:map gnus-summary-mode-map
                ("R" . gnus-summary-wide-reply-with-original)
                :map gnus-article-mode-map
                ("R" . gnus-summary-wide-reply-with-original)))
#+end_src
** Sending mail
Sending mail with built-in message mode and smtpmail, using the instructions from [[https://github.com/harishkrupo/oauth2ms/blob/main/steps.org][oauth2ms]] to handle authentication (needed with two-step verification) for Office365:
#+begin_src emacs-lisp
  ;;; Call the oauth2ms program to fetch the authentication token
  (defun fetch-access-token ()
    (with-temp-buffer
      (call-process "oauth2ms" nil t nil "--encode-xoauth2")
      (buffer-string)))

  ;;; Add new authentication method for xoauth2
  (cl-defmethod smtpmail-try-auth-method
      (process (_mech (eql xoauth2)) user password)
    (let* ((access-token (fetch-access-token)))
      (smtpmail-command-or-throw
       process
       (concat "AUTH XOAUTH2 " access-token)
       235)))

  ;;; Register the method
  (with-eval-after-load 'smtpmail
    ;; work around but #57373 where smtp-auth method from authinfo
    ;; is a string so it won't work
    (defun smtpmail-try-auth-methods (process supported-extensions host port
                                            &optional ask-for-password)
    (setq port
          (if port
              (format "%s" port)
            "smtp"))
    (let* ((mechs (seq-intersection
                   smtpmail-auth-supported
                   (cdr-safe (assoc 'auth supported-extensions))
                   #'eq))
           (auth-source-creation-prompts
            '((user  . "SMTP user name for %h: ")
              (secret . "SMTP password for %u@%h: ")))
           (auth-info (car
                       (auth-source-search
                        :host host
                        :port port
                        :user smtpmail-smtp-user
                        :max 1
                        :require (and ask-for-password
                                      '(:user :secret))
                        :create ask-for-password)))
           (mech (or (plist-get auth-info :smtp-auth) (car mechs)))
           (user (plist-get auth-info :user))
           (password (plist-get auth-info :secret))
           (save-function (and ask-for-password
                               (plist-get auth-info :save-function))))
      (when (functionp password)
        (setq password (funcall password)))
      (when (and user
                 (not password))
        ;; The user has stored the user name, but not the password, so
        ;; ask for the password, even if we're not forcing that through
        ;; `ask-for-password'.
        (setq auth-info
              (car
               (auth-source-search
                :max 1
                :host host
                :port port
                :user smtpmail-smtp-user
                :require '(:user :secret)
                :create t))
              password (plist-get auth-info :secret)))
      (when (functionp password)
        (setq password (funcall password)))
      (let ((result (catch 'done
                      (if (and mech user password)
                          ;; TODO: remove when updating emacs; the change to fix #57373:
                          (smtpmail-try-auth-method process (intern-soft mech) user password)
                        ;; No mechanism, or no credentials.
                        mech))))
        (if (stringp result)
            (progn
              (auth-source-forget+ :host host :port port)
              (throw 'done result))
          (when save-function
            (funcall save-function))
          result))))
    (add-to-list 'smtpmail-auth-supported 'xoauth2))

  (setq starttls-use-gnutls t)

  (setq message-send-mail-function 'smtpmail-send-it
        ;; don't keep message buffers
        message-kill-buffer-on-exit t
        user-full-name "John Kehayias"
        ;; format reply line as On day, month day, year at time,
        ;; name (or email) wrote
        message-citation-line-format "On %a, %b %d, %Y at %I:%M %p, %N wrote:\n"
        message-citation-line-function 'message-insert-formatted-citation-line)
#+end_src
* Programming
** Magit
Magit for source control with git/github. Some modifications necessary for dealing with paths in Windows with msys2.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    ;; :pin melpa-stable
    :config
    (setq magit-last-seen-setup-instructions "1.4.0")
    :bind (("\C-xg" . magit-status))
    :init
    (add-hook 'magit-process-find-password-functions 'magit-process-password-auth-source))
#+END_SRC

** Autocompletion with company-mode
#+BEGIN_SRC emacs-lisp
  ;; auto-complete
  ;; (require 'auto-complete-config)
  ;; (global-auto-complete-mode 1)
  ;; (ac-config-default)
  ;; (add-to-list 'ac-dictionary-directories "~/.emacs.d/dict")
  ;; (eval-after-load 'auto-complete
  ;;   '(ac-flyspell-workaround))

  (use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode))

  (use-package company-quickhelp
    :config
    (company-quickhelp-mode 1))
#+END_SRC

*** company-mode keybindings
Some keybindings to behave more like auto-complete (in another use-package for nowso that company-active-map exists, see [[https://github.com/jwiegley/use-package/issues/269][this issue]]).

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind (:map company-active-map
          ("TAB"       . company-complete-common-or-cycle)
          ("<tab>"     . company-complete-common-or-cycle)
          ("S-TAB"     . company-select-previous)
          ("<backtab>" . company-select-previous)))
#+END_SRC

** Flycheck for showing errors and style complaints
#+BEGIN_SRC emacs-lisp
  ;; flycheck
  (use-package flycheck
    :hook
    (after-init . global-flycheck-mode))
  ;; color the modeline by flycheck status
  ;; (compatibility issue with previous color theme/powerline :()
  ;; seems okay now with smart-mode-line
  (use-package flycheck-color-mode-line
    :config
    (eval-after-load "flycheck"
      '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode)))
#+END_SRC

** All things parens
*** Pretty colors
#+BEGIN_SRC emacs-lisp
  ;; Rainbow parens
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'LaTeX-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
*** Smartparens as a more general paredit
Set up to behave like paredit in lisp modes
#+BEGIN_SRC emacs-lisp
  ;; Smartparens
  (use-package smartparens-config
    :ensure smartparens
    :config
    (smartparens-global-mode 1)
    (show-smartparens-global-mode 1)
    ;; for some (e.g. molokai) themes this is the wrong color
    ;(setq sp-highlight-pair-overlay nil)
    ;; paredit-like setup for lisp
    (add-hook 'lisp-mode-hook 'turn-on-smartparens-strict-mode)
    (add-hook 'scheme-mode-hook 'turn-on-smartparens-strict-mode)
    (add-hook 'emacs-lisp-mode-hook 'turn-on-smartparens-strict-mode)
    (setq sp-base-key-bindings 'paredit)
    (sp-use-paredit-bindings)
    (define-key sp-keymap (kbd "M-J") 'sp-join-sexp)
    (sp-local-pair 'lisp-mode "(" ")" :wrap "M-(")
    (sp-local-pair 'lisp-mode "\"" "\"" :wrap "M-\""))
#+END_SRC
** Lisp and SLIME
*** Slime and other lisp stuff
#+BEGIN_SRC emacs-lisp
  ;;; From quicklisp, instead of current slime in melpa
  ;(load (expand-file-name "~/quicklisp/slime-helper.el"))
  (use-package slime
    ;:ensure nil ; needed to make sure using quicklisp version
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (add-to-list 'slime-contribs 'slime-banner)
    (add-to-list 'slime-contribs 'slime-company)
    (add-to-list 'slime-contribs 'inferior-slime)
    ;; Use Common Lisp indenting
    (setq lisp-indent-function 'common-lisp-indent-function)
    :hook
    (lisp-mode . slime-mode)
    (inferior-lisp-mode . (lambda () (inferior-slime-mode 1))))

  (use-package slime-company
    :after (slime company)
    :config
    (setq slime-company-completion 'fuzzy
          slime-company-after-completion 'slime-company-just-one-space))
#+END_SRC
*** Highlight current sexp
Set highlight background color to be slightly darker than the background color (based on a [[https://emacs.stackexchange.com/questions/9740/how-to-define-a-good-highlight-face][StackExchange answer]]) only for light themes
#+BEGIN_SRC emacs-lisp
  ;; highlight-sexp
  (use-package highlight-sexp
    :config
    ;; turn off hl-line-mode locally
    ;; (add-hook 'lisp-mode-hook (lambda ()
    ;;                             (setq-local global-hl-line-mode nil)))
    ;; (add-hook 'emacs-lisp-mode-hook (lambda ()
    ;;                                   (setq-local global-hl-line-mode nil)))

    ;; for light themes, set to be just darker than background
    ;; (otherwise (re)set to default purple)
    (add-hook 'highlight-sexp-mode-hook (lambda ()
                                          (if (equal frame-background-mode 'light)
                                              (setq hl-sexp-background-color
                                                    (color-darken-name
                                                     (face-background 'default) 10))
                                              (setq hl-sexp-background-color "#4b3b4b"))))
    (add-hook 'lisp-mode-hook 'highlight-sexp-mode)
    (add-hook 'scheme-mode-hook 'highlight-sexp-mode)
    (add-hook 'emacs-lisp-mode-hook 'highlight-sexp-mode))
  ;; for leuven theme, default purple is unreadable
  ;;(setq hl-sexp-background-color "#EAF2F5")
#+END_SRC
*** Local lookup in info draft ANSI Common Lisp standard
(via http://users-phys.au.dk/harder/dpans.html)
#+BEGIN_SRC emacs-lisp
  (use-package info-look
    :config
    (info-lookup-add-help
      :mode 'lisp-mode
      :regexp "[^][()'\" \t\n]+"
      :ignore-case t
      :doc-spec '(("(ansicl)Symbol Index" nil nil nil))))
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
  (use-package cython-mode
    :defer t)
#+END_SRC

#+begin_src emacs-lisp
  (use-package python-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
    (add-hook 'python-mode-hook #'eglot-ensure))
#+end_src
*** Jedi
Using company for completions. Be sure to do `M-x jedi:install-server` whenever jedi is updated (and on initial install). Requires virtualenv (python-virtualenv on Arch).
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :defer t
    :disabled t
    :config
    (add-hook 'python-mode-hook 'jedi:setup)
    (setq jedi:complete-on-dot t)
    (add-hook 'python-mode-hook
              (lambda () (add-to-list 'company-backends 'company-jedi))))
#+END_SRC
*** Jupyter/IPython notebook
#+BEGIN_SRC emacs-lisp
  (use-package ein
    :defer t
    :disabled t
    :config
    (require 'ein-dev)
    (setq ein:jupyter-default-server-command "/usr/bin/jupyter"
          ein:jupyter-default-notebook-directory "~/"
          ein:completion-backend 'ein:use-company-jedi-backend))
#+END_SRC
*** Old
Commented out for now as I haven't used python in a while, will need to be updated in the future
#+BEGIN_SRC emacs-lisp
  ;; use python-mode.el
  ;; err...doesn't seem to work, loads python.el (Python vs py mode), fix later
  ;; (setq py-install-directory "~/.emacs.d/.cask/24.5.1/elpa/python-mode-20150512.353/")
  ;; (add-to-list 'load-path py-install-directory)
  ;; (require 'python-mode)
  ;; (when (featurep 'python) (unload-feature 'python t))
  ;; (add-hook 'python-mode-hook 'flyspell-prog-mode) ; spell check comments
  ;; use ipython interpreter
  ;; (setq-default py-shell-name "ipython")
  ;; (setq py-force-py-shell-name-p 1) ; overrides shebang setting

  ;; jedi
  ;; (add-hook 'python-mode-hook 'jedi:setup)
  ;; (setq jedi:complete-on-dot 1)

  ;; cython
  ;; (require 'cython-mode)
  ;; (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.pxd\\'" . cython-mode))
  ;; (add-to-list 'auto-mode-alist '("\\.pxi\\'" . cython-mode))
#+END_SRC
** Haxe
#+begin_src emacs-lisp
  (use-package haxe-mode)
#+end_src
** Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :config
    (global-set-key (kbd "M-n") 'flymake-goto-next-error)
    (global-set-key (kbd "M-p") 'flymake-goto-prev-error)

    ;; Handle projects not in the root folder of a repo
    (cl-defmethod project-root ((project (head eglot-project)))
      (cdr project))

    ;; (defun my-project-try-tsconfig-json (dir)
    ;;   (when-let* ((found (locate-dominating-file dir "tsconfig.json")))
    ;;     (cons 'eglot-project found)))

    ;; (add-hook 'project-find-functions 'my-project-try-tsconfig-json nil nil)

    ;; (add-to-list 'eglot-server-programs
    ;;              '((typescript-mode) "typescript-language-server" "--stdio"))

    (add-to-list 'eglot-server-programs
                 '((haxe-mode) "node"q " ~/transfer/server.js"))

    (setq-default eglot-workspace-configuration
                  '((:pyls . ((:plugins .
                                        ((:pycodestyle . ((:enabled . :json-false)))
                                         (:pyls_black . ((:enabled . t)))))))))

    (defun my-project-try-pyproject-toml (dir)
      (when-let* ((found (locate-dominating-file dir "pyproject.toml")))
        (cons 'eglot-project found)))

    (add-hook 'project-find-functions 'my-project-try-pyproject-toml nil nil))
#+end_src

* Guix
#+begin_src emacs-lisp
  ;; (use-package geiser)
  ;; (use-package geiser-guile
  ;;   :config
  ;;   (add-to-list 'geiser-guile-load-path "~/codemonkey/guix-src"))
  ;; (use-package yasnippet
  ;;   :config
  ;;   (add-to-list 'yas-snippet-dirs "~/codemonkey/guix-src/etc/snippets"))
#+end_src
* Other text modes
** Fountain for screenplay writing
#+BEGIN_SRC emacs-lisp
  (use-package fountain-mode
    :mode "\\.fountain\\'")
#+END_SRC

** Markdown
And edit code blocks (as in org-mode) with markdown-edit-indirect
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :demand markdown-edit-indirect
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'"       . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
           ("C-c '" . markdown-edit-indirect)))
#+END_SRC

** Olivetti
This is a nice distraction free writing environment, but currently has a bug with linum-mode (disable for olivetti-mode).
#+BEGIN_SRC emacs-lisp
  (use-package olivetti)
#+END_SRC

** Ledger
#+begin_src emacs-lisp
  (use-package ledger-mode
    :mode ("\\.journal\\'"))

  (use-package flycheck-ledger)
#+end_src

* LaTeX configuration
#+BEGIN_SRC emacs-lisp
  ; Enable AucTeX
  (use-package tex
    :ensure auctex
    :defer t
    :config
    (setq TeX-auto-save 1)
    (setq TeX-parse-self 1)
    (setq-default TeX-master -1)
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)
    (setq reftex-plug-into-AUCTeX 1)

    ;; some reftex options esp. for big files
    (setq reftex-enable-partial-scans 1)
    (setq reftex-save-parse-info 1)
    (setq reftex-use-multiple-selection-buffers 1)

    ;; spellcheck in LaTex mode
    (add-hook `latex-mode-hook `flyspell-mode)
    (add-hook `tex-mode-hook `flyspell-mode)
    (add-hook `bibtex-mode-hook `flyspell-mode)

    ;; use latexmk for compiling, ~/. latexmkrc has options set
    (add-hook 'LaTeX-mode-hook (lambda ()
      (push
        '("Latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
          :help "Run Latexmk on file")
        TeX-command-list)
    (setq TeX-command-default "Latexmk")))

    ;; force load on file open (still need to edit
    ;; something in math mode for it to kick in though)
    (add-hook 'find-file-hook
              (lambda () (when (eq major-mode 'latex-mode)
                               (latex-unicode-simplified))))


    ;; Automatically activate TeX-fold-mode and fold after opening
    (add-hook 'find-file-hook
              (lambda () (when (eq major-mode 'latex-mode)
                               (TeX-fold-mode 1)
                               (TeX-fold-buffer))))

    ;; Automatically fold new input, run after $ or }
    (add-hook 'LaTeX-mode-hook 
          (lambda () 
            (TeX-fold-mode 1)
            (add-hook 'find-file-hook 'TeX-fold-buffer t t)
            (add-hook 'after-change-functions 
                  (lambda (start end oldlen) 
                    (when (= (- end start) 1)
                      (let ((char-point 
                                     (buffer-substring-no-properties 
                                      start end)))
                       (when (or (string= char-point "}")
                             (string= char-point "$"))
                        (TeX-fold-paragraph)))))
                   t t)))
    ;; Set pdf mode
    (setq TeX-PDF-mode 1)
    ;; Enable synctex
    (setq TeX-source-correlate-mode 1)
    (setq TeX-source-correlate-method 'synctex))

  ;; latex symbols via unicode (suplement fold-mode)
  (use-package latex-pretty-symbols)

  ;; auto-complete using company-mode auctex and math backends
  (use-package company-auctex
    :defer t
    :config
    (company-auctex-init))
  (use-package company-math
    :config
    (add-to-list 'company-backends 'company-math-symbols-unicode))

  ;;
  ;; auto-complete for latex
  ;;
  ;; switched to company-mode
  ;; (require 'ac-math)
  ;; (add-to-list 'ac-modes 'latex-mode)   ; make auto-complete aware of `latex-mode`
  ;; (defun ac-latex-mode-setup ()         ; add ac-sources to default ac-sources
  ;;   (setq ac-sources
  ;;      (append '(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands)
  ;;                ac-sources)))
  ;; (add-hook 'latex-mode-hook 'ac-latex-mode-setup)
  ;; (defvar ac-source-math-latex-everywere
  ;; '((candidates . ac-math-symbols-latex)
  ;;   (prefix . "\\\\\\(.*\\)")
  ;;   (action . ac-math-action-latex)
  ;;   (symbol . "l")
  ;;  ))
#+END_SRC
* Fun stuff
** EMMS for music playing
Make sure mp3info is installed (and found by emacs)
#+BEGIN_SRC emacs-lisp
  (use-package emms-setup
    :ensure emms
    :defer t
    :config
    (emms-devel)
    (emms-default-players))
#+END_SRC
** Icons. All of them.
Prepend a font to fix icon issues in mu4e with mu4e-marker-icons (see [[https://github.com/stardiviner/mu4e-marker-icons/issues/1][this issue]])

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :config
    (set-fontset-font t 'unicode (font-spec :family "Material Icons") nil 'prepend))

  (use-package all-the-icons-dired
   :config
   (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))
#+END_SRC
* Local Variables
Rather than using ~org-auto-tangle-mode~, use a custom function on save to tangle and compile:

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle-file (expand-file-name "dotemacs.org")) (byte-compile-file (expand-file-name "dotemacs.el"))) nil t)
# End:
